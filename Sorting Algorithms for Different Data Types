// Soare Alex Antonio 151
// Grigorascu Andrei Antonio 151
// Serbanescu George Florin 151

#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <string>
#include <algorithm> // for default sort
#include <random>	// for random
#include <chrono>  // for time

std::ifstream in("tests.txt");
std::ofstream out("results.txt");

// define FunctionPointer datatype 
//			-> pointing at functions which return void and have a vector<Type> reference as argument
typedef void (*FunctionPointerUI)(std::vector<unsigned int>&); 
typedef void (*FunctionPointerULL)(std::vector<unsigned long long>&);
typedef void (*FunctionPointerI)(std::vector<int>&);
typedef void (*FunctionPointerLL)(std::vector<long long>&);
typedef void (*FunctionPointerF)(std::vector<float>&);

// vector with pairs ( FunctionName, FunctionPointer )  -> void functionName(vector<int>&) 
std::vector<std::pair<std::string, FunctionPointerUI>> sortsUI; 
std::vector<std::pair<std::string, FunctionPointerULL>> sortsULL;
std::vector<std::pair<std::string, FunctionPointerI>> sortsI;
std::vector<std::pair<std::string, FunctionPointerLL>> sortsLL;
std::vector<std::pair<std::string, FunctionPointerF>> sortsF;

// vector with pairs ( N, MAX ) 
std::vector<std::pair<int, long long int>> tests;
unsigned long long int nr_of_tests, n;
long long int maxi;

namespace Bubble {

	template <typename Type>
	void swap(Type& x, Type& y) {
		Type z = x;
		x = y;
		y = z;
	}

	template<typename Type>
	void bubbleSort(std::vector<Type>& vec) {
		bool swapped = true;
		while (swapped) {
			swapped = false;
			for (int i = 0; i < vec.size() - 1; i++) {
				if (vec[i] > vec[i + 1]) {
					swap(vec[i], vec[i + 1]);
					swapped = true;
				}
			}
		}
	}

	template<typename Type>
	void bubbleSort2(std::vector<Type>& vec) {
		for (int i = 0; i < vec.size(); i++) {
			for (int j = i + 1; j < vec.size(); j++) {
				if (vec[i] > vec[j]) {
					swap(vec[i], vec[j]);
				}
			}
		}
	}

}
namespace Insertion {

	template <typename Type>
	void insertionSort(std::vector<Type>& vec) {
		for (int i = 1; i < vec.size(); i++) {
			int j = i - 1;
			Type x = vec[i];
			while (j >= 0 && x < vec[j]) {
				vec[j + 1] = vec[j];
				j--;
			}
			vec[j + 1] = x;
		}
	}

	template <typename Type>
	void shellSort(std::vector<Type>& vec) {
		for (int gap = vec.size() / 2; gap > 0; gap /= 2) {
			for (int i = gap; i < vec.size(); i++) {
				int j = i - gap;
				Type x = vec[i];
				while (j >= 0 && x < vec[j]) {
					vec[j + gap] = vec[j];
					j -= gap;
				}
				vec[j + gap] = x;
			}
		}
	}

}
namespace Quick {
	
	template <typename Type>
	void swap(Type& x, Type& y) {
		Type z = x;
		x = y;
		y = z;
	}

	template <typename Type>
	void quick_sort(std::vector<Type>& vec, int l, int r) {
		if (l < r) {
			int pivot = l + (rand() % (r - l + 1));
			swap(vec[pivot], vec[r]); // moving the pivot at the end of the vector
			int j = l - 1;
			for (int i = l; i < r; i++) {
				if (vec[i] < vec[r]) {
					j++;
					swap(vec[i], vec[j]);
				}
			}
			j++;
			swap(vec[r], vec[j]); // returning the pivot in it's place
			// j is the partition point
			quick_sort(vec, l, j - 1);
			quick_sort(vec, j + 1, r);
		}
	}
	template <typename Type>
	void quickSort(std::vector<Type>& vec) {
		// we need this function, beacause our FunctionPointer points only to functions of this type
		quick_sort(vec, 0, vec.size() - 1);
	}



	template <typename Type>
	void quick_sort2(std::vector<Type>& vec, int l, int r) {
		// this function doesn't have a random pivot selection
		// which will be very bad for semi-sorted inputs
		// resulting in stack overflow problems
		if (l < r) {
			int pivot = r; 
			int j = l - 1;
			for (int i = l; i < r; i++) {
				if (vec[i] < vec[pivot]) {
					j++;
					swap(vec[i], vec[j]);
				}
			}
			j++;
			swap(vec[pivot], vec[j]);
			// j is the partition point
			quick_sort2(vec, l, j - 1);
			quick_sort2(vec, j + 1, r);
		}
	}
	template <typename Type>
	void quickSort2(std::vector<Type>& vec) {
		// we need this function, beacause our FunctionPointer points only to functions of this type
		quick_sort2(vec, 0, vec.size() - 1);
	}
	
}
namespace Merge {	
	
	template <typename Type>
	void merge_sort(std::vector<Type>& vec, std::vector<Type>& aux, int l, int r) {
		if (l < r) {
			int mid = l + ((r - l) / 2); // finding the mid without overflow
			//we swap aux with vec beacuse we don't want to do an extra iteration after  
			merge_sort(aux, vec, l, mid);		
			merge_sort(aux, vec, mid + 1, r);
			int i = l;
			int j = mid + 1;
			int h = l;
			while (i <= mid && j <= r) {
				if (aux[i] < aux[j]) {
					vec[h] = aux[i];
					h++; i++;
				}
				else {
					vec[h] = aux[j];
					h++; j++;
				}
			}
			while (i <= mid) {
				vec[h] = aux[i];
				h++; i++;
			}
			while (j <= r) {
				vec[h] = aux[j];
				h++; j++;
			}
		}
	}

	template <typename Type>
	void mergeSort(std::vector<Type>& vec) {
		// we need this function, beacause our FunctionPointer points only to functions of this type
		std::vector<Type> aux = vec;
		merge_sort(vec, aux, 0, vec.size() - 1);
	}



	template <typename Type>
	void merge_sort2(std::vector<Type>& vec, std::vector<Type>& aux, int l, int r) {
		if (l < r) {
			int mid = l + ((r - l) / 2); // finding the mid without overflow
			merge_sort2(vec, aux, l, mid);
			merge_sort2(vec, aux, mid + 1, r);
			int i = l;
			int j = mid + 1;
			int h = l;
			while (i <= mid && j <= r) {
				if (vec[i] < vec[j]) {
					aux[h] = vec[i];
					h++; i++;
				}
				else {
					aux[h] = vec[j];
					h++; j++;
				}
			}
			while (i <= mid) {
				aux[h] = vec[i];
				h++; i++;
			}
			while (j <= r) {
				aux[h] = vec[j];
				h++; j++;
			}
			for (int i = l; i <= r; i++) {
				vec[i] = aux[i];
			}
		}
	}
	template <typename Type>
	void mergeSort2(std::vector<Type>& vec) {
		// we need this function, beacause our FunctionPointer points only to functions of this type
		std::vector<Type> aux = vec;
		merge_sort2(vec, aux, 0, vec.size() - 1);
	}



	template <typename Type>
	std::vector<Type> merge(std::vector<Type>& v1, std::vector<Type>& v2) {
		std::vector<Type> vec;
		int i = 0, j = 0;
		while (i < v1.size() && j < v2.size()) {
			if (v1[i] < v2[j]) {
				vec.push_back(v1[i]);
				i++;
			}
			else {
				vec.push_back(v2[j]);
				j++;
			}
		}
		while (i < v1.size()) {
			vec.push_back(v1[i]);
			i++;
		}
		while (j < v2.size()) {
			vec.push_back(v2[j]);
			j++;
		}
		return vec;
	}
	template <typename Type>
	std::vector<Type> merge_sort_slow(std::vector<Type>& vec, int l, int r) {
		std::vector<Type> v1, v2;
		if (l < r) {
			int mid = l + ((r - l) / 2); // finding the mid without overflow
			v1 = merge_sort_slow(vec, l, mid);
			v2 = merge_sort_slow(vec, mid + 1, r);
			return merge(v1, v2);
		}
		else {
			return { vec[l] }; // a vector with just one element
		}
	}
	template <typename Type>
	void mergeSortSlow(std::vector<Type>& vec) {
		// we need this function, beacause our FunctionPointer points only to functions of this type
		// 10 times slower beacuse does too much memmory allocation
		vec = merge_sort_slow(vec, 0, vec.size() - 1);
	}


}
namespace Heap {
	
	template <typename Type>
	class Heap {
	private:						
		std::vector<Type> heap;		// this is a min heap data structure
	public:
		Heap() : heap{ 0 } {}		// the indexing will start from 1 

		void swap(Type& x, Type& y) {
			Type z = x;
			x = y;
			y = z;
		}

		Type pop() {				// returning and deleting the min element
			Type x = heap[1];		

			swap(heap[1], heap[heap.size() - 1]);		 // moving the first element to the last position
			heap.erase(heap.begin() + heap.size() - 1);  // deleting it
			
			int ind = 1;
			int son = 2;
			if (son < heap.size()) {
				if (son + 1 < heap.size() && heap[son] > heap[son + 1]) {
					son++;  // if there exist a second son that has a lower value we take him
				}
				while (heap[son] < heap[ind]) {
					swap(heap[son], heap[ind]);
					ind = son;
					son = ind * 2;
					if (son >= heap.size()) { break; }  // we reached the end
					if (son + 1 < heap.size() && heap[son] > heap[son + 1]) {
						son++;	// if there exist a second son that has a lower value we take him
					}
				}
			}
			return x;
		}

		void add(Type x) {
			int ind = heap.size();
			heap.push_back(x);
			while (heap[ind] < heap[ind / 2] && ind > 1) {
				swap(heap[ind], heap[ind / 2]);
				ind /= 2;
			}
		}

	};

	template <typename Type>
	void heapSort(std::vector<Type>& vec) {
		Heap<Type> heap; 
		for (int i = 0; i < vec.size(); i++) {
			heap.add(vec[i]);
		}
		for (int i = 0; i < vec.size(); i++) {
			vec[i] = heap.pop();
		}
	}
}
namespace Radix {

	template <typename Type>
	void radixNot(std::vector<Type>& vec) {
		throw 1; // we throw an erorr because it can't sort
	}
	
	template <typename Type>
	void prefix_sum(std::vector<Type>& vec) {
		for (int i = 1; i < vec.size(); i++) {
			vec[i] = vec[i] + vec[i - 1];
		}
	}

	template <typename Type>
	void radixSortCounts(std::vector<Type>& vec) {
		std::vector<int> counts(10, 0);
		std::vector<Type> aux(vec.size());
		long long mask = 10;
		while (true) {
			counts = std::vector<int>(10, 0);
			for (int i = 0; i < vec.size();i++) {
				int digit = (vec[i] % mask) / (mask/10);
				counts[digit]++;
			}
			if (counts[0] == vec.size()) { break; }
			prefix_sum(counts);
			for (int i = vec.size() - 1; i >= 0; i--) {
				int digit = (vec[i] % mask) / (mask / 10);
				counts[digit]--;
				aux[counts[digit]] = vec[i];
			}
			vec = aux;
			mask *= 10;
		}
	}

	template <typename Type>	//it seems that this is not semnificativley faster, so we won't use it
	void radixSortCounts2(std::vector<Type>& vec) {
		std::vector<int> counts(10, 0);
		std::vector<Type> aux(vec.size());
		long long mask = 10;
		while (true) {
			counts = std::vector<int>(10, 0);
			for (int i = 0; i < vec.size(); i++) {
				int digit = (vec[i] % mask) / (mask / 10);
				counts[digit]++;
			}
			if (counts[0] == vec.size()) { break; }
			prefix_sum(counts);
			for (int i = vec.size() - 1; i >= 0; i--) {
				int digit = (vec[i] % mask) / (mask / 10);
				counts[digit]--;
				aux[counts[digit]] = vec[i];
			}
			mask *= 10;
			//to prevent redundant copying we will compute the next iteration from aux
			counts = std::vector<int>(10, 0);
			for (int i = 0; i < aux.size(); i++) {
				int digit = (aux[i] % mask) / (mask / 10);
				//out << digit << std::endl;
				counts[digit]++;
			}
			if (counts[0] == aux.size()) { vec = aux; break; }
			prefix_sum(counts);
			for (int i = aux.size() - 1; i >= 0; i--) {
				int digit = (aux[i] % mask) / (mask / 10);
				counts[digit]--;
				vec[counts[digit]] = aux[i];
			}
			mask *= 10;
		}
	}

	template <typename Type>	// 5 times slower than the vector variant, so we won't use it
	void radixSortBucketsQueue(std::vector<Type>& vec) {
		std::vector<std::queue<Type>> buckets(10);
		long long mask = 10;
		bool finished = false;
		while (!finished) {
			finished = true;
			for (int i = 0; i < vec.size(); i++) {
				int digit = (vec[i] % mask) / (mask / 10);
				buckets[digit].push(vec[i]);
			}
			int idx = 0;
			for (int i = 0; i < vec.size(); i++) {
				while (buckets[idx].empty()) { idx++; }
				vec[i] = buckets[idx].front();
				buckets[idx].pop();
				if (idx != 0) { finished = false; }
			}
			mask *= 10;
		}
	}

	template <typename Type>
	void radixSortBucketsVector(std::vector<Type>& vec) {
		std::vector<std::vector<Type>> buckets(10);
		long long mask = 10;
		while (true) {
			for (auto& bucket : buckets) {
				bucket.clear();
			}
			for (int i = 0; i < vec.size(); i++) {
				int digit = (vec[i] % mask) / (mask / 10);
				buckets[digit].push_back(vec[i]);
			}
			if (buckets[0].size() == vec.size()) { break; }
			int idx = 0;
			for (int i = 0; i < 10; i++) {
				for (int j = 0; j < buckets[i].size(); j++) {
					vec[idx] = buckets[i][j];
					idx++;
				}
			}
			mask *= 10;
		}
	}
	
	template <typename Type>
	void radixSortCountsBase2(std::vector<Type>& vec) {
		int exp = 16;
		int base = 1 << exp;
		std::vector<int> counts(base);
		std::vector<Type> aux(vec.size());
		long long mask = base - 1;
		int iter = 1;
		while (true) {
			counts = std::vector<int>(base, 0);
			for (int i = 0; i < vec.size(); i++) {
				int digit = ((vec[i] & mask)>>((iter-1)*exp));
				counts[digit]++;
			}
			if (counts[0] == vec.size()) { break; }
			prefix_sum(counts);
			for (int i = vec.size() - 1; i >= 0; i--) {
				int digit = ((vec[i] & mask) >> ((iter - 1) * exp));
				counts[digit]--;
				aux[counts[digit]] = vec[i];
			}
			vec = aux;
			mask = mask << exp;
			iter++;
		}
	}

	template <typename Type>
	void radixSortBucketsVectorBase2(std::vector<Type>& vec) {
		int exp = 16;
		int base = 1 << exp;
		std::vector<std::vector<Type>> buckets(base);
		long long mask = base - 1;
		int iter = 1;
		while (true) {
			for (auto& bucket : buckets) {
				bucket.clear();
			}
			for (int i = 0; i < vec.size(); i++) {
				int digit = ((vec[i] & mask) >> ((iter - 1) * exp));
				buckets[digit].push_back(vec[i]);
			}
			if (buckets[0].size() == vec.size()) { break; }
			int idx = 0;
			for (int i = 0; i < base; i++) {
				for (int j = 0; j < buckets[i].size(); j++) {
					vec[idx] = buckets[i][j];
					idx++;
				}
			}
			mask = mask << exp;
			iter++;
		}
	}

	template <typename Type>
	void radixSortCountsSigned(std::vector<Type>& vec) {
		std::vector<Type> negative, pozitive;
		for (auto val : vec) {
			if (val < 0) { negative.push_back((-1) * val); }
			else { pozitive.push_back(val); }
		}
		radixSortCounts(negative);
		radixSortCounts(pozitive);
		long long i = 0;
		for (long long j = negative.size() - 1; j >= 0; j--) {
			vec[i++] = (-1) * negative[j];
		}
		for (long long j = 0; j < pozitive.size(); j++) {
			vec[i++] = pozitive[j];
		}
	}

	template <typename Type>
	void radixSortBucketsVectorSigned(std::vector<Type>& vec) {
		std::vector<Type> negative, pozitive;
		for (auto val : vec) {
			if (val < 0) { negative.push_back((-1) * val); }
			else { pozitive.push_back(val); }
		}
		radixSortBucketsVector(negative);
		radixSortBucketsVector(pozitive);
		long long i = 0;
		for (long long j = negative.size() - 1; j >= 0; j--) {
			vec[i++] = (-1) * negative[j];
		}
		for (long long j = 0; j < pozitive.size(); j++) {
			vec[i++] = pozitive[j];
		}
	}

	template <typename Type>
	void radixSortCountsBase2Signed(std::vector<Type>& vec) {
		std::vector<Type> negative, pozitive;
		for (auto val : vec) {
			if (val < 0) { negative.push_back((-1) * val); }
			else { pozitive.push_back(val); }
		}
		radixSortCountsBase2(negative);
		radixSortCountsBase2(pozitive);
		long long i = 0;
		for (long long j = negative.size() - 1; j >= 0; j--) {
			vec[i++] = (-1) * negative[j];
		}
		for (long long j = 0; j < pozitive.size(); j++) {
			vec[i++] = pozitive[j];
		}
	}

	template <typename Type>
	void radixSortBucketsVectorBase2Signed(std::vector<Type>& vec) {
		std::vector<Type> negative, pozitive;
		for (auto val : vec) {
			if (val < 0) { negative.push_back((-1) * val); }
			else { pozitive.push_back(val); }
		}
		radixSortBucketsVectorBase2(negative);
		radixSortBucketsVectorBase2(pozitive);
		long long i = 0;
		for (long long j = negative.size() - 1; j >= 0; j--) {
			vec[i++] = (-1) * negative[j];
		}
		for (long long j = 0; j < pozitive.size(); j++) {
			vec[i++] = pozitive[j];
		}
	}

}
namespace Count {
	
	template <typename Type>
	void countNot(std::vector<Type>& vec) {
		throw 1; // we throw an erorr because it can't sort
	}

	template <typename Type>
	void countSort(std::vector<Type>& vec){
		long long min_element = vec[0];
		long long max_element = vec[0];
		for (long long i = 0; i < vec.size(); i++) {
			if (vec[i] > max_element) { max_element = vec[i]; }
			else if(vec[i] < min_element) { min_element = vec[i];}
		}
		if (max_element - min_element > INT32_MAX / 2) { throw 1; }
		int size = max_element - min_element + 1;
		std::vector<long long> aux(size, 0);

		for (long long i = 0; i < vec.size(); i++) {
			aux[vec[i] - min_element]++;
		}
		long long i = 0;
		for (long long j = 0; j < size; j++) {
			while (aux[j] > 0) {
				aux[j]--;
				vec[i] = min_element + j;
				i++;
			}
		}
	}

}


template <typename Type>
void print(std::vector<Type>& vec) {
	for (int j = 0; j < vec.size(); j++) {
		out << vec[j] << " ";
	}
	out << std::endl;
}

template <typename Type>
bool test_sort(std::vector<Type>& numbers, std::vector<Type>& sorted_numbers) {
	for (int i = 0; i < numbers.size(); i++) {
		if (numbers[i] != sorted_numbers[i]) { return false; }
	}
	return true;
}

std::vector<unsigned int> generateRandomUI(unsigned long long n, unsigned int maxi) {
	unsigned int x;
	std::vector<unsigned int> numbers;
	std::random_device rd;  // Seed for the random number generator
	std::mt19937 rng(rd()); // Mersenne Twister engine
	std::uniform_int_distribution<int> distribution(1, maxi + 1); // Generator for numbers between 1 and max
	for (unsigned long long j = 0; j < n; j++) {
		x = distribution(rng);
		numbers.push_back(x);
	}
	return numbers;
}
std::vector<unsigned long long> generateRandomULL(unsigned long long n, unsigned long long maxi) {
	unsigned long long x;
	std::vector<unsigned long long> numbers;
	std::random_device rd;  // Seed for the random number generator
	std::mt19937 rng(rd()); // Mersenne Twister engine
	std::uniform_int_distribution<long long> distribution(1, maxi + 1); // Generator for numbers between 1 and max
	for (unsigned long long j = 0; j < n; j++) {
		x = distribution(rng);
		numbers.push_back(x);
	}
	return numbers;
}
std::vector<int> generateRandomI(unsigned long long n, int maxi) {
	int x;
	std::vector<int> numbers;
	std::random_device rd;  // Seed for the random number generator
	std::mt19937 rng(rd()); // Mersenne Twister engine
	std::uniform_int_distribution<int> distribution((- 1)*maxi - 1, maxi + 1); // Generator for numbers between -maxi and max
	for (unsigned long long j = 0; j < n; j++) {
		x = distribution(rng);
		numbers.push_back(x);
	}
	return numbers;
}
std::vector<long long> generateRandomLL(unsigned long long n, long long maxi) {
	long long x;
	std::vector<long long> numbers;
	std::random_device rd;  // Seed for the random number generator
	std::mt19937 rng(rd()); // Mersenne Twister engine
	std::uniform_int_distribution<long long> distribution((-1)*maxi - 1, maxi + 1); // Generator for numbers between -maxi and max
	for (unsigned long long j = 0; j < n; j++) {
		x = distribution(rng);
		numbers.push_back(x);
	}
	return numbers;
}
std::vector<float> generateRandomF(unsigned long long n, float maxi) {
	float x;
	std::vector<float> numbers;
	std::random_device rd;  // Seed for the random number generator
	std::mt19937 rng(rd()); // Mersenne Twister engine
	std::uniform_real_distribution<float> distribution((-1) * maxi - 1, maxi + 1); // Generator for numbers between -maxi and max
	for (unsigned long long j = 0; j < n; j++) {
		x = distribution(rng);
		numbers.push_back(x);
	}
	return numbers;
}

template <typename Type>
void sortDefault(std::vector<Type>& sorted_numbers) {
	auto start_time = std::chrono::high_resolution_clock::now();
	sort(sorted_numbers.begin(), sorted_numbers.end());
	auto end_time = std::chrono::high_resolution_clock::now();
	auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
	out << "defaultSort time: " << duration.count() << " miliseconds" << std::endl;
}

template <typename FunctionPointer , typename Type>
void iteratingSortingFunctions(std::vector<std::pair<std::string, FunctionPointer>> sorts, std::vector<Type>& numbers) {
	
	// sorting the numbers using default function
	std::vector<Type> sorted_numbers = numbers;  // will be sorted with defaultSort
	sortDefault(sorted_numbers);
	
	std::vector<Type> numbers_to_sort; // will be sorted with various sorts
	for (auto& sort_function : sorts) {
		//sort_function has two fieds ( Name, FunctionPointer )
		std::string name = sort_function.first;
		auto sortFunction = sort_function.second; // pointer to a function
		numbers_to_sort.clear();
		numbers_to_sort = numbers;

		try {
			auto start_time = std::chrono::high_resolution_clock::now();
			sortFunction(numbers_to_sort); // calling the pointed function and sorting the numbers "in-place"  
			auto end_time = std::chrono::high_resolution_clock::now();
			auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
			out << name << "Sort time: " << duration.count() << " miliseconds";

			// check if the sort was correct
			bool succesful = test_sort(numbers_to_sort, sorted_numbers);
			if (succesful) { out << "\tSuccesful" << std::endl; }
			else { out << "\tWRONG" << std::endl; }
		}
		catch (const std::bad_alloc& e) {
			out << name << "\tcould not sort, you don't have enough memory" << std::endl;
		}
		catch (...) {
			out << name << "\tcould not sort" << std::endl;
		}
	}
}

void sortingUnsignedInt(unsigned long long n, unsigned int maxi) {
	// generate random numbers
	std::vector<unsigned int> numbers = generateRandomUI(n, maxi); // will be random numbers
	
	// sorting the numbers using different sorting functions
	iteratingSortingFunctions(sortsUI, numbers);
}
void sortingInt(unsigned long long n, int maxi) {
	// generate random numbers
	std::vector<int> numbers = generateRandomI(n, maxi); // will be random numbers
	
	// sorting the numbers using different sorting functions
	iteratingSortingFunctions(sortsI, numbers);
}
void sortingFloat(unsigned long long n, float maxi) {
	// generate random numbers
	std::vector<float> numbers = generateRandomF(n, maxi); // will be random numbers
	
	// sorting the numbers using different sorting functions
	iteratingSortingFunctions(sortsF, numbers);
}
void sortingUnsignedLongLong(unsigned long long n, unsigned long long maxi) {
	// generate random numbers
	std::vector<unsigned long long> numbers = generateRandomULL(n, maxi); // will be random numbers

	// sorting the numbers using different sorting functions
	iteratingSortingFunctions(sortsULL, numbers);
}
void sortingLongLong(unsigned long long n, long long maxi) {
	// generate random numbers
	std::vector<long long> numbers = generateRandomLL(n, maxi); // will be random numbers

	// sorting the numbers using different sorting functions
	iteratingSortingFunctions(sortsLL, numbers);
}

void init_sorts() {
	// Initializing sorts for unsigned int
	sortsUI.push_back({ "Merge", &Merge::mergeSort });
	sortsUI.push_back({ "Quick", &Quick::quickSort });
	sortsUI.push_back({ "Shell",&Insertion::shellSort });
	sortsUI.push_back({ "Heap ", &Heap::heapSort });
	sortsUI.push_back({ "RadixC", &Radix::radixSortCounts });
	sortsUI.push_back({ "RadixC16", &Radix::radixSortCountsBase2 });
	sortsUI.push_back({ "RadixBV", &Radix::radixSortBucketsVector });
	sortsUI.push_back({ "RadixBV16", &Radix::radixSortBucketsVectorBase2 });
	sortsUI.push_back({ "Counting", &Count::countSort });

	// Initializing sorts for unsigned long long
	sortsULL.push_back({ "Merge", &Merge::mergeSort });
	sortsULL.push_back({ "Quick", &Quick::quickSort });
	sortsULL.push_back({ "Shell",&Insertion::shellSort });
	sortsULL.push_back({ "Heap ", &Heap::heapSort });
	sortsULL.push_back({ "RadixC", &Radix::radixSortCounts });
	sortsULL.push_back({ "RadixC16", &Radix::radixSortCountsBase2 });
	sortsULL.push_back({ "RadixBV", &Radix::radixSortBucketsVector });
	sortsULL.push_back({ "RadixBV16", &Radix::radixSortBucketsVectorBase2 });
	sortsULL.push_back({ "Counting", &Count::countSort });

	// Initializing sorts for int
	sortsI.push_back({ "Merge", &Merge::mergeSort });
	sortsI.push_back({ "Quick", &Quick::quickSort });
	sortsI.push_back({ "Shell",&Insertion::shellSort });
	sortsI.push_back({ "Heap ", &Heap::heapSort });
	sortsI.push_back({ "RadixC", &Radix::radixSortCountsSigned });
	sortsI.push_back({ "RadixC16", &Radix::radixSortCountsBase2Signed });
	sortsI.push_back({ "RadixBV", &Radix::radixSortBucketsVectorSigned });
	sortsI.push_back({ "RadixBV16", &Radix::radixSortBucketsVectorBase2Signed });
	sortsI.push_back({ "Counting", &Count::countSort });

	// Initializing sorts for long long
	sortsLL.push_back({ "Merge", &Merge::mergeSort });
	sortsLL.push_back({ "Quick", &Quick::quickSort });
	sortsLL.push_back({ "Shell",&Insertion::shellSort });
	sortsLL.push_back({ "Heap ", &Heap::heapSort });
	sortsLL.push_back({ "RadixC", &Radix::radixSortCountsSigned });
	sortsLL.push_back({ "RadixC16", &Radix::radixSortCountsBase2Signed });
	sortsLL.push_back({ "RadixBV", &Radix::radixSortBucketsVectorSigned });
	sortsLL.push_back({ "RadixBV16", &Radix::radixSortBucketsVectorBase2Signed });
	sortsLL.push_back({ "Counting", &Count::countSort });

	// Initializing sorts for float
	sortsF.push_back({ "Merge", &Merge::mergeSort });
	sortsF.push_back({ "Quick", &Quick::quickSort });
	sortsF.push_back({ "Shell",&Insertion::shellSort });
	sortsF.push_back({ "Heap ", &Heap::heapSort });
	sortsF.push_back({ "Radix   ", &Radix::radixNot });
	sortsF.push_back({ "Counting", &Count::countNot });
	
}

int main(){
	
	init_sorts();

	srand(time(nullptr)); // seed for random number generator
	//try opening the file
	if (in.is_open()) {
		in >> nr_of_tests;
		for (int i = 0; i < nr_of_tests; i++) {
			in >> n >> maxi;
			out << std::endl << " --- TEST NR: " << i << " \tN = " << n << "\tMAX = " << maxi << std::endl;
			try {
				if (0 < n && n < INT64_MAX - 2) {
					if (INT32_MIN + 2 < maxi && maxi < INT32_MAX - 2) {

						out << "\n --- Sorting unsigned int values --- \n";
						sortingUnsignedInt(n, maxi);
						out << "\n ------------------------------\n";

						out << "\n --- Sorting int values --- \n";
						sortingInt(n, maxi);
						out << "\n ------------------------------\n";

						out << "\n --- Sorting float values --- \n";
						sortingFloat(n, maxi);
						out << "\n ------------------------------\n";

					}
					else if (INT64_MIN + 2 < maxi && maxi < INT64_MAX - 2) {

						out << "\n --- Sorting unsigned long long values --- \n";
						sortingUnsignedLongLong(n, maxi);
						out << "\n ------------------------------\n";

						out << "\n --- Sorting long long values --- \n";
						sortingLongLong(n, maxi);
						out << "\n ------------------------------\n";

					}
					else {
						throw 1; // we throw an exception 
					}
				}
				else {
					throw 1; // we throw an exception
				}
			}
			catch (...) {
				out << "We could not process this input :( \n";
			}
		}
		in.close();
	}
	else {
		out << "Could not open the file\n";
	}
	return 0;
}
